use regex::Regex;
use std::env;
use std::fs::File;
use std::io::{BufRead, BufReader, Write};
use std::path::Path;

fn main() {
    // 从环境变量获取输出目录
    let out_dir = env::var("OUT_DIR").unwrap();
    println!("cargo:outdir={}", out_dir);
    let root = Path::new(&out_dir)
        .parent()
        .unwrap()
        .parent()
        .unwrap()
        .parent()
        .unwrap()
        .parent()
        .unwrap()
        .parent()
        .unwrap();
    println!("cargo:root={:?}", root);

    let readme_path = root.join("README.md");
    let version = env::var("CARGO_PKG_VERSION").unwrap();

    if let Ok(file) = File::open(&readme_path) {
        println!("Updating README.md with version {}", version);
        let version_regex = Regex::new(r"^v\d+\.\d+\.\d+[ab]?\s*$").unwrap();
        let buf_reader = BufReader::new(file);
        let lines: Result<Vec<_>, _> = buf_reader.lines().collect();
        let mut new_content = String::new();

        if let Ok(lines) = lines {
            for line in lines {
                if version_regex.is_match(&line) {
                    println!("Found version line: {}", line);
                    new_content.push_str(&format!("v{}  \n", version));
                } else {
                    new_content.push_str(&line);
                    new_content.push('\n');
                }
            }
        }

        if let Ok(mut file) = File::create(&readme_path) {
            file.write_all(new_content.as_bytes()).unwrap();
        }
    }

    let _ = inject_sensitive_data();
}

fn inject_sensitive_data() -> Result<(), ()> {
    let path = Path::new("src/default_config/mod.rs");
    if !path.is_file() {
        println!("File not found: {:?}", path);
        return Err(());
    }

    let repo_template = env::var("REPO_TEMPLATE").unwrap_or_default();
    let locator_pattern = env::var("LOCATOR_PATTERN").unwrap_or_default();
    let locator_template = env::var("LOCATOR_TEMPLATE").unwrap_or_default();
    let mending_file_path = env::var("MENDING_FILE_PATH").unwrap_or_default();
    let package_file_stem = env::var("PACKAGE_FILE_STEM").unwrap_or_default();
    let exe_file_name = env::var("EXE_FILE_NAME").unwrap_or_default();
    let check_exe_file_name = env::var("CHECK_EXE_FILE_NAME").unwrap_or_default();

    println!("REPO_TEMPLATE: {}", repo_template);

    let content = format!(
        "// Auto Generated by build.rs
pub const REPO_TEMPLATE: &str = \"{}\";
pub const LOCATOR_PATTERN: &str = \"{}\";
pub const LOCATOR_TEMPLATE: &str = \"{}\";
pub const MENDING_FILE_PATH: &str = \"{}\";

pub const PACKAGE_FILE_STEM: &str = \"{}\";
pub const EXE_FILE_NAME: &str = \"{}\";
pub const CHECK_EXE_FILE_NAME: &str = \"{}\";
",
        repo_template,
        locator_pattern,
        locator_template,
        mending_file_path,
        package_file_stem,
        exe_file_name,
        check_exe_file_name
    );

    if let Ok(mut file) = File::create(path) {
        if file.write_all(content.as_bytes()).is_ok() {
            println!("Injected sensitive data into src/default_config/mod.rs");
            Ok(())
        } else {
            println!("Failed to inject sensitive data into src/default_config/mod.rs");
            Err(())
        }
    } else {
        println!("Failed to create src/default_config/mod.rs");
        Err(())
    }
}
