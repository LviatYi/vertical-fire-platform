use std::env;
use std::fs::File;
use std::io::{BufRead, Write};
use std::path::Path;

fn main() {
    println!("cargo build with build.rs is running.");

    let _ = inject_sensitive_data();
}

fn inject_sensitive_data() -> Result<(), ()> {
    let path = Path::new("src/default_config/mod.rs");
    if !path.is_file() {
        println!("File not found: {:?}", path);
        return Err(());
    }

    let recommend_job_names = env::var("RECOMMEND_JOB_NAMES").unwrap_or_default();
    let repo_template = env::var("REPO_TEMPLATE").unwrap_or_default();
    let locator_pattern = env::var("LOCATOR_PATTERN").unwrap_or_default();
    let locator_template = env::var("LOCATOR_TEMPLATE").unwrap_or_default();
    let mending_file_path = env::var("MENDING_FILE_PATH").unwrap_or_default();
    let package_file_stem = env::var("PACKAGE_FILE_STEM").unwrap_or_default();
    let exe_file_name = env::var("EXE_FILE_NAME").unwrap_or_default();
    let check_exe_file_name = env::var("CHECK_EXE_FILE_NAME").unwrap_or_default();
    let jenkins_url = env::var("JENKINS_URL").unwrap_or_default();
    let query_token_github = env::var("QUERY_TOKEN_GITHUB").unwrap_or_default();

    let recommend_job_names = recommend_job_names
        .split([',', ';'])
        .filter(|s| !s.is_empty())
        .map(|s| format!("\t\t\"{}\"", s.trim()))
        .collect::<Vec<_>>();

    if repo_template.is_empty() {
        println!("ENV VARIABLE NOT SET");
    }

    let content = format!(
        "// Auto Generated by build.rs. Do not edit it manually.
// Used for sensitive data injection.

pub const COUNT: u32 = 4;
pub const RUN_COUNT: u32 = 1;
pub const WATCH_INTERVAL: u64 = 10;
pub const WATCH_QUERY_BUILDS_COUNT: u32 = 10;
pub const OLDEST_SUPPORT_UPDATE_VERSION: &str = \"1.5.0\";

pub const RECOMMEND_JOB_NAMES: [&str; {}] = [
{}];

pub const REPO_TEMPLATE: &str = \"{}\";
pub const LOCATOR_PATTERN: &str = \"{}\";
pub const LOCATOR_TEMPLATE: &str = \"{}\";
pub const MENDING_FILE_PATH: &str = \"{}\";

pub const PACKAGE_FILE_STEM: &str = \"{}\";
pub const EXE_FILE_NAME: &str = \"{}\";
pub const CHECK_EXE_FILE_NAME: &str = \"{}\";

pub const JENKINS_URL: &str = \"{}\";

pub const QUERY_TOKEN_GITHUB: &str = \"{}\";
",
        recommend_job_names.len(),
        recommend_job_names.join(",\n"),
        repo_template,
        locator_pattern,
        locator_template,
        mending_file_path,
        package_file_stem,
        exe_file_name,
        check_exe_file_name,
        jenkins_url,
        query_token_github,
    );

    if let Ok(mut file) = File::create(path) {
        if file.write_all(content.as_bytes()).is_ok() {
            println!("Injected sensitive data into src/default_config/mod.rs");
            Ok(())
        } else {
            println!("Failed to inject sensitive data into src/default_config/mod.rs");
            Err(())
        }
    } else {
        println!("Failed to create src/default_config/mod.rs");
        Err(())
    }
}
